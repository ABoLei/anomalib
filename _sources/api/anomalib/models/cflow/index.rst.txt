:py:mod:`anomalib.models.cflow`
===============================

.. py:module:: anomalib.models.cflow

.. autoapi-nested-parse::

   Real-Time  Unsupervised Anomaly Detection via Conditional Normalizing Flows.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   anomaly_map/index.rst
   lightning_model/index.rst
   torch_model/index.rst
   utils/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   anomalib.models.cflow.CflowLightning




.. py:class:: CflowLightning(hparams)

   Bases: :py:obj:`anomalib.models.components.AnomalyModule`

   PL Lightning Module for the CFLOW algorithm.

   .. py:method:: configure_callbacks(self)

      Configure model-specific callbacks.


   .. py:method:: configure_optimizers(self) -> torch.optim.Optimizer

      Configures optimizers for each decoder.

      :returns: Adam optimizer for each decoder
      :rtype: Optimizer


   .. py:method:: training_step(self, batch, _)

      Training Step of CFLOW.

      For each batch, decoder layers are trained with a dynamic fiber batch size.
      Training step is performed manually as multiple training steps are involved
          per batch of input images

      :param batch: Input batch
      :param _: Index of the batch.

      :returns: Loss value for the batch


   .. py:method:: validation_step(self, batch, _)

      Validation Step of CFLOW.

          Similar to the training step, encoder features
          are extracted from the CNN for each batch, and anomaly
          map is computed.

      :param batch: Input batch
      :param _: Index of the batch.

      :returns: Dictionary containing images, anomaly maps, true labels and masks.
                These are required in `validation_epoch_end` for feature concatenation.



