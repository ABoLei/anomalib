:py:mod:`anomalib.models.patchcore.utils.sampling`
==================================================

.. py:module:: anomalib.models.patchcore.utils.sampling

.. autoapi-nested-parse::

   Patchcore sampling utils.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   k_center_greedy/index.rst
   nearest_neighbors/index.rst
   random_projection/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   anomalib.models.patchcore.utils.sampling.KCenterGreedy
   anomalib.models.patchcore.utils.sampling.NearestNeighbors
   anomalib.models.patchcore.utils.sampling.SparseRandomProjection




.. py:class:: KCenterGreedy(model: anomalib.models.patchcore.utils.sampling.random_projection.SparseRandomProjection, embedding: torch.Tensor, sampling_ratio: float)

   Implements k-center-greedy method.

   :param model: model with scikit-like API with decision_function. Defaults to SparseRandomProjection.
   :param embedding: Embedding vector extracted from a CNN
   :type embedding: Tensor
   :param sampling_ratio: Ratio to choose coreset size from the embedding size.
   :type sampling_ratio: float

   .. rubric:: Example

   >>> embedding.shape
   torch.Size([219520, 1536])
   >>> sampler = KCenterGreedy(embedding=embedding)
   >>> sampled_idxs = sampler.select_coreset_idxs()
   >>> coreset = embedding[sampled_idxs]
   >>> coreset.shape
   torch.Size([219, 1536])

   .. py:method:: reset_distances(self) -> None

      Reset minimum distances.


   .. py:method:: get_new_cluster_centers(self, cluster_centers: List[int]) -> List[int]

      Get new cluster center indexes from the list of cluster indexes.

      :param cluster_centers: List of cluster center indexes.
      :type cluster_centers: List[int]

      :returns: List of new cluster center indexes.
      :rtype: List[int]


   .. py:method:: update_distances(self, cluster_centers: List[int]) -> None

      Update min distances given cluster centers.

      :param cluster_centers: indices of cluster centers
      :type cluster_centers: List[int]


   .. py:method:: get_new_idx(self) -> int

      Get index value of a sample.

      Based on (i) either minimum distance of the cluster or (ii) random subsampling from the embedding.

      :returns: Sample index
      :rtype: int


   .. py:method:: select_coreset_idxs(self, selected_idxs: Optional[List[int]] = None) -> List[int]

      Greedily form a coreset to minimize the maximum distance of a cluster.

      :param selected_idxs: index of samples already selected. Defaults to an empty set.

      :returns: indices of samples selected to minimize distance to cluster centers


   .. py:method:: sample_coreset(self, selected_idxs: Optional[List[int]] = None) -> torch.Tensor

      Select coreset from the embedding.

      :param selected_idxs: index of samples already selected. Defaults to an empty set.

      :returns: Output coreset
      :rtype: Tensor

      .. rubric:: Example

      >>> embedding.shape
      torch.Size([219520, 1536])
      >>> sampler = KCenterGreedy(...)
      >>> coreset = sampler.sample_coreset()
      >>> coreset.shape
      torch.Size([219, 1536])



.. py:class:: NearestNeighbors(n_neighbors: int)

   Bases: :py:obj:`anomalib.core.model.dynamic_module.DynamicBufferModule`

   Nearest Neighbours using brute force method and euclidean norm.

   :param n_neighbors: Number of neighbors to look at
   :type n_neighbors: int

   .. py:method:: fit(self, train_features: torch.Tensor)

      Saves the train features for NN search later.

      :param train_features: Training data
      :type train_features: Tensor


   .. py:method:: kneighbors(self, test_features: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]

      Return k-nearest neighbors.

      It is calculated based on bruteforce method.

      :param test_features: test data
      :type test_features: Tensor

      :returns: distances, indices
      :rtype: Tuple[Tensor, Tensor]



.. py:class:: SparseRandomProjection(eps: float = 0.1, random_state: Optional[int] = None)

   Sparse Random Projection using PyTorch operations.

   :param eps: Minimum distortion rate parameter for calculating
               Johnson-Lindenstrauss minimum dimensions. Defaults to 0.1.
   :type eps: float, optional
   :param random_state: Uses the seed to set the random
                        state for sample_without_replacement function. Defaults to None.
   :type random_state: Optional[int], optional

   .. py:method:: _sparse_random_matrix(self, n_features: int)

      Random sparse matrix. Based on https://web.stanford.edu/~hastie/Papers/Ping/KDD06_rp.pdf.

      :param n_features: Dimentionality of the original source space
      :type n_features: int

      :returns:

                Sparse matrix of shape (n_components, n_features).
                    The generated Gaussian random matrix is in CSR (compressed sparse row)
                    format.
      :rtype: Tensor


   .. py:method:: johnson_lindenstrauss_min_dim(self, n_samples: int, eps: float = 0.1)

      Find a 'safe' number of components to randomly project to.

      Ref eqn 2.1 https://cseweb.ucsd.edu/~dasgupta/papers/jl.pdf

      :param n_samples: Number of samples used to compute safe components
      :type n_samples: int
      :param eps: Minimum distortion rate. Defaults to 0.1.
      :type eps: float, optional


   .. py:method:: fit(self, embedding: torch.Tensor) -> SparseRandomProjection

      Generates sparse matrix from the embedding tensor.

      :param embedding: embedding tensor for generating embedding
      :type embedding: Tensor

      :returns: Return self to be used as
                >>> generator = SparseRandomProjection()
                >>> generator = generator.fit()
      :rtype: (SparseRandomProjection)


   .. py:method:: transform(self, embedding: torch.Tensor) -> torch.Tensor

      Project the data by using matrix product with the random matrix.

      :param embedding: Embedding of shape (n_samples, n_features)
                        The input data to project into a smaller dimensional space
      :type embedding: Tensor

      :returns:

                Sparse matrix of shape
                    (n_samples, n_components) Projected array.
      :rtype: projected_embedding (Tensor)



