:py:mod:`anomalib.models.components.freia.modules.all_in_one_block`
===================================================================

.. py:module:: anomalib.models.components.freia.modules.all_in_one_block

.. autoapi-nested-parse::

   All in One Block Module.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   anomalib.models.components.freia.modules.all_in_one_block.AllInOneBlock




.. py:class:: AllInOneBlock(dims_in, dims_c=[], subnet_constructor: Callable = None, affine_clamping: float = 2.0, gin_block: bool = False, global_affine_init: float = 1.0, global_affine_type: str = 'SOFTPLUS', permute_soft: bool = False, learned_householder_permutation: int = 0, reverse_permutation: bool = False)

   Bases: :py:obj:`anomalib.models.components.freia.modules.base.InvertibleModule`

   Module combining the most common operations in a normalizing flow or similar model.

   It combines affine coupling, permutation, and global affine transformation
   ('ActNorm'). It can also be used as GIN coupling block, perform learned
   householder permutations, and use an inverted pre-permutation. The affine
   transformation includes a soft clamping mechanism, first used in Real-NVP.
   The block as a whole performs the following computation:
   .. math::
       y = V\\,R \\; \\Psi(s_\\mathrm{global}) \\odot \\mathrm{Coupling}\\Big(R^{-1} V^{-1} x\\Big)+ t_\\mathrm{global}
   - The inverse pre-permutation of x (i.e. :math:`R^{-1} V^{-1}`) is optional (see
     ``reverse_permutation`` below).
   - The learned householder reflection matrix
     :math:`V` is also optional all together (see ``learned_householder_permutation``
     below).
   - For the coupling, the input is split into :math:`x_1, x_2` along
     the channel dimension. Then the output of the coupling operation is the
     two halves :math:`u = \\mathrm{concat}(u_1, u_2)`.
     .. math::
         u_1 &= x_1 \\odot \\exp \\Big( \\alpha \\; \\mathrm{tanh}\\big( s(x_2) \\big)\\Big) + t(x_2) \\\\
         u_2 &= x_2
     Because :math:`\\mathrm{tanh}(s) \\in [-1, 1]`, this clamping mechanism prevents
     exploding values in the exponential. The hyperparameter :math:`\\alpha` can be adjusted.

   .. py:method:: _construct_householder_permutation(self)

      Compute a permutation matrix.

      Compute a permutation matrix from the reflection vectors that are
      learned internally as nn.Parameters.


   .. py:method:: _permute(self, x, rev=False)

      Perform permutation.

      Performs the permutation and scaling after the coupling operation.
      Returns transformed outputs and the LogJacDet of the scaling operation.


   .. py:method:: _pre_permute(self, x, rev=False)

      Permute before the coupling block, only used if reverse_permutation is set.


   .. py:method:: _affine(self, x, a, rev=False)

      Perform affine coupling operation.

      Given the passive half, and the pre-activation outputs of the
      coupling subnetwork, perform the affine coupling operation.
      Returns both the transformed inputs and the LogJacDet.


   .. py:method:: forward(self, x, c=[], rev=False, jac=True)

      See base class docstring.


   .. py:method:: output_dims(self, input_dims)

      Output Dims.



