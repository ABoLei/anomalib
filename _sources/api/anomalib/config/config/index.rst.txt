:py:mod:`anomalib.config.config`
================================

.. py:module:: anomalib.config.config

.. autoapi-nested-parse::

   Get configurable parameters.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   anomalib.config.config.update_input_size_config
   anomalib.config.config.update_nncf_config
   anomalib.config.config.update_multi_gpu_training_config
   anomalib.config.config.update_device_config
   anomalib.config.config.get_configurable_parameters



.. py:function:: update_input_size_config(config: Union[omegaconf.DictConfig, omegaconf.ListConfig]) -> Union[omegaconf.DictConfig, omegaconf.ListConfig]

   Update config with image size as tuple, effective input size and tiling stride.

   Convert integer image size parameters into tuples, calculate the effective input size based on image size
   and crop size, and set tiling stride if undefined.

   :param config: Configurable parameters object
   :type config: Union[DictConfig, ListConfig]

   :returns: Configurable parameters with updated values
   :rtype: Union[DictConfig, ListConfig]


.. py:function:: update_nncf_config(config: Union[omegaconf.DictConfig, omegaconf.ListConfig]) -> Union[omegaconf.DictConfig, omegaconf.ListConfig]

   Set the NNCF input size based on the value of the crop_size parameter in the configurable parameters object.

   :param config: Configurable parameters of the current run.
   :type config: Union[DictConfig, ListConfig]

   :returns: Updated configurable parameters in DictConfig object.
   :rtype: Union[DictConfig, ListConfig]


.. py:function:: update_multi_gpu_training_config(config: Union[omegaconf.DictConfig, omegaconf.ListConfig]) -> Union[omegaconf.DictConfig, omegaconf.ListConfig]

   Updates the config to change learning rate based on number of gpus assigned.

   Current behaviour is to ensure only ddp accelerator is used.

   :param config: Configurable parameters for the current run
   :type config: Union[DictConfig, ListConfig]

   :raises ValueError: If unsupported accelerator is passed

   :returns: Updated config
   :rtype: Union[DictConfig, ListConfig]


.. py:function:: update_device_config(config: Union[omegaconf.DictConfig, omegaconf.ListConfig], openvino: bool) -> Union[omegaconf.DictConfig, omegaconf.ListConfig]

   Update XPU Device Config This function ensures devices are configured correctly by the user.

   :param config: Input config
   :type config: Union[DictConfig, ListConfig]
   :param openvino: Boolean to check if OpenVINO Inference is enabled.
   :type openvino: bool

   :returns: Updated config
   :rtype: Union[DictConfig, ListConfig]


.. py:function:: get_configurable_parameters(model_name: Optional[str] = None, model_config_path: Optional[Union[pathlib.Path, str]] = None, weight_file: Optional[str] = None, openvino: bool = False, config_filename: Optional[str] = 'config', config_file_extension: Optional[str] = 'yaml') -> Union[omegaconf.DictConfig, omegaconf.ListConfig]

   Get configurable parameters.

   :param model_name: Optional[str]:  (Default value = None)
   :param model_config_path: Optional[Union[Path, str]]:  (Default value = None)
   :param weight_file: Path to the weight file
   :param openvino: Use OpenVINO
   :param config_filename: Optional[str]:  (Default value = "config")
   :param config_file_extension: Optional[str]:  (Default value = "yaml")

   :returns: Configurable parameters in DictConfig object.
   :rtype: Union[DictConfig, ListConfig]


